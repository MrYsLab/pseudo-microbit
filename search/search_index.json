{
    "docs": [
        {
            "location": "/",
            "text": "Using\n\n\n\n\nPyCharm\n\n\n\n\nTo Program The\n\n\n\n\nmicro:bit\n\n\n\n\n\n\n \n\n\n\n\n\n\n\nOver the past several years, I have come to rely heavily  upon the \n\nPyCharm Integrated Development Environment (IDE)\n\n in creating and publishing my \nopen source Python projects\n. Not only is PyCharm easy to use,\n but its numerous features help to shorten development time and improve product quality.\n\n\nRecently, I've begun developing code for the \nmicro:bit\n,\nbut was sad to discover that PyCharm \ncurrently\n does not have built-in support for \n\nmicro:bit MicroPython\n.\nSince my development efforts often consist of both desktop components as well as components that reside\non a physical computing device, such as the micro:bit, I prefer to do all of my development using one tool and not have\nto deal with keeping the project in sync over multiple tools. Because PyCharm is so extremely flexible and easily adaptable,\nI was able to extend the current version of PyCharm to support micro:bit MicroPython software development.\n\n\nIn this tutorial, I will show you how to configure the \nfree\n PyCharm Community Edition (or\nthe Professional Edition) to provide:\n\n\n\n\n\n\nmicro:bit aware source code editing including type hinting\n\n\n\n\n\n\nthe ability to flash your code to the micro:bit directly from PyCharm\n\n\n\n\n\n\nthe ability to manage the micro:bit local persistent file system directly from PyCharm",
            "title": "Introduction"
        },
        {
            "location": "/install/",
            "text": "Installing pseudo-microbit\n\n\nOpen a command or terminal window.\n\n\nFor Windows, type:\n\n\npip install pseudo-microbit\n\n\n\n\n\nFor Linux or Mac type:\n\n\nsudo pip3 install pseudo-microbit\n\n\n\n\n\nInstalling PyCharm\n\n\nGo to the \nPyCharm home page\n \nand download the latest version of PyCharm Community (or Professional) Edition for your operating system. \n\n\nAfter downloading, install PyCharm on your computer and launch it.\n\n\nCreating A New Project\n\n\nWhen you see the following screen appear, select \nCreate New Project\n.\n\n\n \n\n\nIn the next screen, give your project a name. For this tutorial, I am calling the project \npycharm_microbit_demo\n.\n\n\n \n\n\nBy default, PyCharm uses Python virtual environments and by clicking \nCreate\n we accept this default.\n If you are unfamiliar with virtual environments, essentially, a virtual environment provides a sandbox for your project.\nA virtual environment isolates your project from all other project environments, allowing you to tailor your environment\nto use specific versions of Python libraries without having adverse affects on other projects.\n\n\nPyCharm automatically creates and manages the virtual environment for you, so once the project is created, you can\n all but forget you are in a virtual environment.\nYou can read more about virtual environments \nhere\n.\n\n\nAfter hitting the \nCreate\n button, within a few moments you should see a new project screen similar to this:\n\n\n \n\n\nViewing The Toolbar\n\n\nFor convenience, let's expose the Toolbar to save a few mouse clicks. Click on View/Toolbar\n\n\n \n\n\nThe toolbar is now exposed at the top of the screen.\n\n\n \n\n\nAdding A Python File To The Project\n\n\nNow let's add a Python file that imports and uses the micro:bit MicroPython module and see what happens.\n\n\nOn the left hand side of the screen, under the blue \nProject\n banner, right click \npycharm_microbit_demo\n, select \nNew\n and\nthen \nPython File\n\n\n\n\nGive the file a name. The .py extension will automatically be added to the name. I am going to call this file\n\ndemo\n. \n\n\nCopy and paste this file into the editor.\n\n\nfrom microbit import *\n\nwhile True:\n    if button_a.is_pressed():\n        display.show(Image.YES)\n    elif button_b.is_pressed():\n        display.show(Image.NO)\n    else:\n        display.show(Image.ASLEEP)\n\n\n\n\n\n\nWhat's with all those wavy red lines?\n\n\n\n\nThey are not only ugly, but its PyCharm telling us that we need to fix something.\nEach of those red lines represents an \nunresolved reference\n error. Move your mouse cursor\nover any of those lines to get an explanation of the error.\n\n\nWhy are there unresolved references? The reason is that PyCharm is not aware of \nthe \nmicro:bit MicroPython API\n.\nThe module supporting the API is not part of the standard Python library.\n\n\nTo fix that, we need to add the micro:bit MicroPython API definitions to PyCharm.\nThose definitions are contained in a Python package I created called \npseudo-microbit\n.\n This is an open source package that anyone can download from the \nPyPi\n package management system.\n We will let PyCharm download and install this package for us.\n\n\nMaking PyCharm \nmicro:bit\n Aware\n\n\nStep 1:\n Click on the \nSettings\n icon on the Toolbar.\n\n\n\n\nStep 2\n: Select \nProject Interpreter\n on the left side of the screen and then click the green plus sign to bring up \nthe \nInstall\n menu.\n\n\n\n\nStep 3\n: Type \npseudo-microbit\n at the top of the screen and then press the \nInstall Package\n button at the bottom left\nof the screen. Wait for the \nsuccessful install\n message to appear, then close this window and the settings window\nto get back to the editor.\n\n\n\n\nAll the wavy red lines are gone, and there are no more unresolved references.\n\n\n\n\nAnd now, as we type in new code, PyCharm will give us \ntype hints\n.\n\n\n\n\nSelect the method or value from the type hint menu and double click to have PyCharm perform\ncode completion for you.\n\n\nAdding uflash, pyminifier and microfs As External Tools\n\n\nWhen we installed \npseudo-microbit\n, three additional packages were automatically added to our virtual environment.\n\n\n\n\n\n\nuflash\n - the micro:bit flash utility.\n\n\n\n\n\n\nmicrofs\n - the micro:bit persistent file system utility.\n\n\n\n\n\n\npyminifier\n - a utility to \"minify\" python files.\n\n\n\n\n\n\nThe pyminifier program removes all comments and unnecessary white space from a python file. This is\nuseful, since the micro:bit has limited memory resources and allows us to flash programs that would\notherwise not fit.\n\n\nWe could run these from the terminal window built into PyCharm, but it would mean having to\ntype in the entire command line manually.\n\n\nLet's add these utilities as \nExternal Tools\n that we can invoke them with the click of the mouse.\n\n\nStep 1\n: Click on the \nSettings\n icon again, but this time select \nTools/External Tools\n and click on the \ngreen plus\n.\n\n\n\n\nStep 2\n: Fill out the \nCreate Tool\n dialog and click Ok.\n\n\n\n\nStep 3\n: While we're in this section of the program, let's go ahead and fill out external tool\ncommands for the 4 \nmicrofs\n commands:\n\n\n\n\n\n\nls\n    - lists the files in the file system \n\n\n\n\n\n\nput\n   - places a file into the file system\n\n\n\n\n\n\nget\n   - retrieves a file from the file system\n\n\n\n\n\n\nrm\n    - removes a file from the file system\n\n\n\n\n\n\nNote:\n The microfs utility uses the command name of \nufs\n.\nFor example to run the \nls\n command on a command line, you would type:\nufs ls\n\n\nLet's continue with creating the External Tool entries. Click on the copy icon.\n\n\n\n\nStep 4\n: Create an external tool entry for each of the commands. Use the Copy icon for each command.\n\n\n\n\n\n\n\n\n\n\nStep 5\n: Lastly, add pyminifier as an external tool. As we did in Step 3, we are going to click on the \ncopy icon. Fill out the form to look like the following:\n\n\n\n\nWhen your are done, click \nApply\n and then \nOk\n\n\n\n\nNote:\n These external tools are now available globally within PyCharm. When you\ncreate your next project, they will already be in place.\n\n\nMinifying Python Files\n\n\nThe micro:bit has limited memory resources, so in order to be able to flash the largest program\nwe can, we need to remove all comments and unnecessary white space. This is called \nminifying\n the program.\n\n\nWhen we use the minify external tool, the original Python file is left untouched, with its comments\nand white space intact, and a new file is created with  \"_min\" added to the original file name.\n\n\nSo for example, our commented file's name is \nabc.py\n, after minifying, the additional file\nnamed \nabc_min.py\n will be created.\n\n\nWe will flash using the minified file.\n\n\n\n\nFlashing Programs To The micro:bit\n\n\nTo flash a program to the micro:bit, right click on a file name in the Project\nwindow, select \nExternal Tools\n, and then select \nuflash\n from the context menu.\n\n\nThe file will be flashed to the micro:bit.\n\n\n\n\nWorking With The Persistent File System\n\n\nThere are times that you may wish to add functionality to your project that is not part of the standard \nmicro:bit library. To import and gain access to the module, you will need to\nplace the library in the micro:bit persistent file system.\n\n\nThe \n*servo library *\n is a prime example of such\na module.\nThere are explicit instructions on how to import an external module in the \nservo\n distribution.\nJust click the \nservo library\n link to view the instructions.\n\n\nAfter copying the servo.py source code from the servo distribution, I created a new directory\ncalled \nexternal_modules\n and then placed servo.py in that directory.\n\n\n\n\nTo add servo.py to the persistent file system, right click on the file name, select External Tools and\nthen select \nufs put\n.\n\n\n\n\nTo make sure that file was added, right click servo.py again, but this time, select \nufs ls\n.\n\n\n\n\nConclusion\n\n\nNow that you have configured PyCharm to be micro:bit MicroPython aware,\nyou are now ready to create Python programs for the micro:bit using PyCharm, so try it out!",
            "title": "Working With PyCharm"
        },
        {
            "location": "/install/#installing-pseudo-microbit",
            "text": "Open a command or terminal window.  For Windows, type:  pip install pseudo-microbit  For Linux or Mac type:  sudo pip3 install pseudo-microbit",
            "title": "Installing pseudo-microbit"
        },
        {
            "location": "/install/#installing-pycharm",
            "text": "Go to the  PyCharm home page  \nand download the latest version of PyCharm Community (or Professional) Edition for your operating system.   After downloading, install PyCharm on your computer and launch it.",
            "title": "Installing PyCharm"
        },
        {
            "location": "/install/#creating-a-new-project",
            "text": "When you see the following screen appear, select  Create New Project .     In the next screen, give your project a name. For this tutorial, I am calling the project  pycharm_microbit_demo .     By default, PyCharm uses Python virtual environments and by clicking  Create  we accept this default.\n If you are unfamiliar with virtual environments, essentially, a virtual environment provides a sandbox for your project.\nA virtual environment isolates your project from all other project environments, allowing you to tailor your environment\nto use specific versions of Python libraries without having adverse affects on other projects.  PyCharm automatically creates and manages the virtual environment for you, so once the project is created, you can\n all but forget you are in a virtual environment.\nYou can read more about virtual environments  here .  After hitting the  Create  button, within a few moments you should see a new project screen similar to this:",
            "title": "Creating A New Project"
        },
        {
            "location": "/install/#viewing-the-toolbar",
            "text": "For convenience, let's expose the Toolbar to save a few mouse clicks. Click on View/Toolbar     The toolbar is now exposed at the top of the screen.",
            "title": "Viewing The Toolbar"
        },
        {
            "location": "/install/#adding-a-python-file-to-the-project",
            "text": "Now let's add a Python file that imports and uses the micro:bit MicroPython module and see what happens.  On the left hand side of the screen, under the blue  Project  banner, right click  pycharm_microbit_demo , select  New  and\nthen  Python File   Give the file a name. The .py extension will automatically be added to the name. I am going to call this file demo .   Copy and paste this file into the editor.  from microbit import *\n\nwhile True:\n    if button_a.is_pressed():\n        display.show(Image.YES)\n    elif button_b.is_pressed():\n        display.show(Image.NO)\n    else:\n        display.show(Image.ASLEEP)  What's with all those wavy red lines?   They are not only ugly, but its PyCharm telling us that we need to fix something.\nEach of those red lines represents an  unresolved reference  error. Move your mouse cursor\nover any of those lines to get an explanation of the error.  Why are there unresolved references? The reason is that PyCharm is not aware of \nthe  micro:bit MicroPython API .\nThe module supporting the API is not part of the standard Python library.  To fix that, we need to add the micro:bit MicroPython API definitions to PyCharm.\nThose definitions are contained in a Python package I created called  pseudo-microbit .\n This is an open source package that anyone can download from the  PyPi  package management system.\n We will let PyCharm download and install this package for us.",
            "title": "Adding A Python File To The Project"
        },
        {
            "location": "/install/#making-pycharm-microbit-aware",
            "text": "Step 1:  Click on the  Settings  icon on the Toolbar.   Step 2 : Select  Project Interpreter  on the left side of the screen and then click the green plus sign to bring up \nthe  Install  menu.   Step 3 : Type  pseudo-microbit  at the top of the screen and then press the  Install Package  button at the bottom left\nof the screen. Wait for the  successful install  message to appear, then close this window and the settings window\nto get back to the editor.   All the wavy red lines are gone, and there are no more unresolved references.   And now, as we type in new code, PyCharm will give us  type hints .   Select the method or value from the type hint menu and double click to have PyCharm perform\ncode completion for you.",
            "title": "Making PyCharm micro:bit Aware"
        },
        {
            "location": "/install/#adding-uflash-pyminifier-and-microfs-as-external-tools",
            "text": "When we installed  pseudo-microbit , three additional packages were automatically added to our virtual environment.    uflash  - the micro:bit flash utility.    microfs  - the micro:bit persistent file system utility.    pyminifier  - a utility to \"minify\" python files.    The pyminifier program removes all comments and unnecessary white space from a python file. This is\nuseful, since the micro:bit has limited memory resources and allows us to flash programs that would\notherwise not fit.  We could run these from the terminal window built into PyCharm, but it would mean having to\ntype in the entire command line manually.  Let's add these utilities as  External Tools  that we can invoke them with the click of the mouse.  Step 1 : Click on the  Settings  icon again, but this time select  Tools/External Tools  and click on the  green plus .   Step 2 : Fill out the  Create Tool  dialog and click Ok.   Step 3 : While we're in this section of the program, let's go ahead and fill out external tool\ncommands for the 4  microfs  commands:    ls     - lists the files in the file system     put    - places a file into the file system    get    - retrieves a file from the file system    rm     - removes a file from the file system    Note:  The microfs utility uses the command name of  ufs .\nFor example to run the  ls  command on a command line, you would type:\nufs ls  Let's continue with creating the External Tool entries. Click on the copy icon.   Step 4 : Create an external tool entry for each of the commands. Use the Copy icon for each command.      Step 5 : Lastly, add pyminifier as an external tool. As we did in Step 3, we are going to click on the \ncopy icon. Fill out the form to look like the following:   When your are done, click  Apply  and then  Ok   Note:  These external tools are now available globally within PyCharm. When you\ncreate your next project, they will already be in place.",
            "title": "Adding uflash, pyminifier and microfs As External Tools"
        },
        {
            "location": "/install/#minifying-python-files",
            "text": "The micro:bit has limited memory resources, so in order to be able to flash the largest program\nwe can, we need to remove all comments and unnecessary white space. This is called  minifying  the program.  When we use the minify external tool, the original Python file is left untouched, with its comments\nand white space intact, and a new file is created with  \"_min\" added to the original file name.  So for example, our commented file's name is  abc.py , after minifying, the additional file\nnamed  abc_min.py  will be created.  We will flash using the minified file.",
            "title": "Minifying Python Files"
        },
        {
            "location": "/install/#flashing-programs-to-the-microbit",
            "text": "To flash a program to the micro:bit, right click on a file name in the Project\nwindow, select  External Tools , and then select  uflash  from the context menu.  The file will be flashed to the micro:bit.",
            "title": "Flashing Programs To The micro:bit"
        },
        {
            "location": "/install/#working-with-the-persistent-file-system",
            "text": "There are times that you may wish to add functionality to your project that is not part of the standard \nmicro:bit library. To import and gain access to the module, you will need to\nplace the library in the micro:bit persistent file system.  The  *servo library *  is a prime example of such\na module.\nThere are explicit instructions on how to import an external module in the  servo  distribution.\nJust click the  servo library  link to view the instructions.  After copying the servo.py source code from the servo distribution, I created a new directory\ncalled  external_modules  and then placed servo.py in that directory.   To add servo.py to the persistent file system, right click on the file name, select External Tools and\nthen select  ufs put .   To make sure that file was added, right click servo.py again, but this time, select  ufs ls .",
            "title": "Working With The Persistent File System"
        },
        {
            "location": "/install/#conclusion",
            "text": "Now that you have configured PyCharm to be micro:bit MicroPython aware,\nyou are now ready to create Python programs for the micro:bit using PyCharm, so try it out!",
            "title": "Conclusion"
        },
        {
            "location": "/contact/",
            "text": "If you have any comments or questions about this tutorial or \nthe pseudo-microbit distribution, please send an email to:\n\nMisterYsLab@gmail.com\n\n\nOr enter an issue at\n\nhttps://github.com/MrYsLab/pseudo-microbit",
            "title": "Contact Information"
        }
    ]
}