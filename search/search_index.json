{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"Using PyCharm To Program The micro:bit <p>PyCharm, my go-to Integrated Development Environment (IDE)  for creating and publishing open-source Python projects,  has significantly improved my development process.  Its user-friendly interface and extensive features not only  expedite development but also enhance the quality of the final product.</p> <p>When attempting to develop code for the micro:bit,  I was sad to discover that  PyCharm currently does not have built-in support  for micro:bit MicroPython.  Since my development efforts often consist  of desktop components and components that reside on a physical computing device, such as the micro:bit, I prefer to do all of my development  using one tool and not have to keep the project in sync over multiple tools.  Because PyCharm is so highly flexible and easily adaptable,  I was able to extend the current version of PyCharm to support  micro:bit MicroPython software development. In this tutorial, I will show you how to configure the free PyCharm  Community Edition (or the cost-based Professional Edition) to provide:</p> <ul> <li>micro:bit aware source code editing, including type hinting</li> <li>the ability to flash your code to the micro:bit directly from PyCharm</li> <li>the ability to manage the micro:bit local persistent file system directly from PyCharm</li> <li>the ability to minimize the size of the Python source file within PyCharm</li> </ul>"},{"location":"add_directory/","title":"Add A Directory To Your Project","text":"<p>Let's add a Python file to our project.</p> <p>After opening PyCharm, click the hamburger icon on the upper left  to view the main menu.</p> <p></p> <p>The main menu now appears at the top of the screen.</p> <p></p> <p>Hover your mouse pointer over the File selection and then click on New....</p> <p></p> <p>Now click on Directory.</p> <p></p> <p>A dialog box appears in the center of the screen to enter a directory name.</p> <p></p> <p>Let's call this directory button_test. After entering the name, hit the Enter key.</p> <p>The new directory appears in the project panel.</p> <p></p>"},{"location":"add_file/","title":"Add A File To Your Project","text":"<p>We want to create a file within a directory we created in the  previous section.</p> <p>Hover your mouse pointer over the directory name.</p> <p></p> <p>Right-click your mouse, and  hover over New, and select Python File.</p> <p></p> <p>A dialog box appears in the center of the screen to enter a name for the new file. The name we will enter is button_test. Now, hit the Enter key.</p> <p>Note that you do not need to add the .py extension. Pycharm will do that  automatically for you.</p> <p></p> <p>Pycharm adds the new file to the Project panel and opens the file in the editor.</p> <p></p> <p>We now type in our code. For demonstration purposes,  I initially misspelled microbit in the import statement.</p> <p>PyCharm flags errors by underlining the error with a red wavy line.</p> <p></p> <p>Changing microbix to microbit resolves all the errors.</p> <p></p>"},{"location":"contact/","title":"Contact Info","text":"<p>If you have any comments or questions about this tutorial  or the pseudo-microbit distribution, please send an email to: MisterYsLab@gmail.com</p> <p>Or enter an issue at https://github.com/MrYsLab/pseudo-microbit</p>"},{"location":"create_project/","title":"Creating A PyCharm Project","text":"<p>In the Name field enter whatever you wish to call the project.  I will be calling my project MyMicroBitProject.</p> <p></p> <p>Click the Create button at the bottom of the window. The new project will appear.</p> <p></p>"},{"location":"external/","title":"Pycharm External Tools","text":"<p>PyCharm allows us to configure third-party command-line applications to run as  External Tools from within PyCharm. </p> <p>We will now configure python-minimizer,  uflash,  and microfs as external tools.</p> <p>The python-minimizer utility compresses a Python source file by removing as much white space as possible. The micro:bit has limited memory space, and minimizing source files allows us to install the largest file possible.</p> <p>The uflash utility is used to flash the BBC micro:bit with Python scripts.</p> <p>The microfs utility allows interaction with the limited file system provided  by MicroPython on the BBC micro:bit. Using this utility, you can list the files  on the device, copy a file to the micro:bit file system, and retrieve a file from the micro:bit filesystem.</p> <p>PyCharm provides a built-in terminal, so if you prefer to interact with  any of these utilities directly via the command line, you may do so.</p> <p></p>"},{"location":"file_min/","title":"Minimize A File","text":"<p>Select the desired file in the Project panel to minimize a Python file.</p> <p></p> <p>Click on the hamburger icon to bring up the main menu.  Slide the mouse over the Tools selection,  select External Tools, and click on python-minimizer.</p> <p></p> <p>The results of the call to python-minimizer are shown in the Run window at the bottom of the screen. Since there were no errors,  a new file named button_test_min.py is added to the button_test directory.</p> <p>This file is now ready to be flashed to the micro:bit.</p> <p></p>"},{"location":"mfs/","title":"Adding microfs to PyCharm External Tools","text":"<p>The microfs utility interacts with the limited file system  provided by MicroPython on the BBC micro:bit.  It is invoked using the command named ufs.</p>"},{"location":"mfs/#attention-linux-users","title":"Attention Linux Users","text":"<p>You may need to add your username to the dialout group to access the serial port. If not you may see a permission denied message when trying to use the ufs commands.</p> <p>To add yourself to the dialout group, open a terminal window and type the following:</p> <p>sudo usermod -a -G dialout YOUR_LINUX_LOGIN_ID</p> <p>Replace YOUR_LINUX_LOGIN_ID with your actual login ID.</p> <p>Then reboot the operating system.</p>"},{"location":"mfs/#creating-external-tools-for-ufs","title":"Creating External Tools For UFS","text":"<p>We will create an External Tool for the following ufs commands:</p> <ul> <li>ls - list the files in the file system</li> <li>put - place a file into the file system</li> <li>rm - remove a file from the file system</li> <li>get - retrieve a file from the file system</li> </ul> <p>For each of the commands we will select Settings/Tool/External Tools from the Settings  then fill in the fields for each command</p>"},{"location":"mfs/#ufs-ls","title":"ufs ls","text":"<ul> <li>Program: $PyInterpreterDirectory$/ufs</li> <li>Arguments: ls</li> <li>Working Directory: left blank</li> </ul>"},{"location":"mfs/#ufs-put","title":"ufs put","text":"<ul> <li>Program: $PyInterpreterDirectory$/ufs</li> <li>Arguments: put $FileName$</li> <li>Working Directory: $FileDir$</li> </ul>"},{"location":"mfs/#ufs-rm","title":"ufs rm","text":"<ul> <li>Program: $PyInterpreterDirectory$/ufs</li> <li>Arguments: rm $FileName$</li> <li>Working Directory: $FileDir$</li> </ul>"},{"location":"mfs/#ufs-get","title":"ufs get","text":"<ul> <li>Program: $PyInterpreterDirectory$/ufs</li> <li>Arguments: get $FileName$</li> <li>Working Directory: $FileDir$</li> </ul>"},{"location":"minimizer/","title":"Adding python-minimizer to PyCharm External Tools","text":"<p>Open the Settings dialog by clicking on the gear wheel in the upper right-hand corner.</p> <p></p> <p>Select Settings</p> <p></p> <p>On the left side of the Settings screen, expand the Tools entry  and then select  External Tools.</p> <p></p> <p>Click on the Plus sign.</p> <p></p> <p>Now, let's fill in the specifics for python-minimizer. </p> <p>Enter a name for the tool in the name field. You can name it anything you like.</p> <p>Enter a description for the tool.</p> <p>In the Tool Settings section, we need to enter the Program. The Program field contains a path to the command the tool will execute.</p> <p>PyCharm uses macros to help create the entries.  Pressing the Plus sign on the right of the Program field shows a  list of available macros. Select the desired option in the list  to add a macro and then press Insert. The macro will be expanded in the macro preview window and added to the field.</p> <p></p> <p>The Program field should be edited to contain:</p> <p>$PyInterpreterDirectory$/python-minimizer</p> <p>After inserting the $PyInterpreterDirectory$, we manually append a slash and the name of the python-minimizer command.</p> <p>Next, we add the command arguments to the Arguments field.  I prefer not to have the original source file minified but to  create a new file with \"_min\"  appended to the file name.</p> <p>To do this, we use the following arguments:</p> <p>-o $FileNameWithoutExtension$_min.$FileExt$ $FilePath$</p> <p>The -o option specifies the output file and $FilePath$ specifies the input file.</p> <p>The Working Directory is set to $FileDir$</p> <p>When you have completed entering all the information,  click OK, and you should see that the Python-minimizer external  tool has been created.</p> <p></p>"},{"location":"minimizer_install/","title":"Installing python-minimizer","text":"<p>We now need to install python-minimizer to the project. This utility allows us to shrink Python files so that they take the minimum amount of space when flashing the code to the micro:bit.</p> <p>Click on the plus sign again, and in the search field, type python-minimizer. As  you type in the name, PyCharm provides possible matches. Select python-minimizer  and press Install Package.</p> <p></p> <p>After the package installs, click Close.</p> <p></p> <p>Click the OK button.</p>"},{"location":"pm_install/","title":"Installing pseudo-microbit","text":"<p>Open the Settings dialog by clicking on the gear wheel in the upper right-hand corner.</p> <p></p> <p>Select Settings</p> <p></p> <p>On the left side of the Settings screen, expand the Project entry,  and then select  Python Interpreter.</p> <p>Click on the Plus sign just above the Package column.</p> <p></p> <p>In the Available Packages dialog, enter pseudo-microbit in the search field.</p> <p></p> <p>Click the Install Package button when it becomes active.</p> <p>When you see the Package Installed Successfully message appear, click on Close.</p> <p></p> <p>The results of the installation are displayed.</p> <p></p>"},{"location":"pycharm_install/","title":"Installing PyCharm","text":"<p>The pseudo-microbit package is compatible with the free community edition and  non-free professional edition versions of PyCharm. </p> <p>To install PyCharm, go to the  PyCharm web page,  download your desired version, and install it on your computer.</p> <p>Some operating systems, such as Ubuntu and Fedora Linux, offer PyCharm  in their \"software stores.\" If you use  one of the stores, you do not need to download anything from the website above.</p> <p></p> <p>Start PyCharm after it installs. You should see something like  the following screen:</p> <p></p> <p>If you are prompted to disable input methods, you should do so.</p> <p>In PyCharm, a project is an organizational unit representing  a complete software solution. It's where you'll manage all your files,  settings, and configurations for a specific software development task.</p> <p>Once your project is set up, this is where you'll create  your micro:bit MicroPython source files. These files will be  located within your project's directory, which you can access from  the PyCharm interface.</p> <p>Click on the Plus sign button to create a new PyCharm project. The New Project dialog will appear.</p>"},{"location":"uflash/","title":"Adding uflash to PyCharm External Tools","text":"<p>The uflash utility is used to flash Python scripts to the BBC micro:bit.</p> <p>Once again, we select Settings/Tool/External Tools from the Settings menu and press the Plus sign. We then fill in the fields:</p> <p>Name: uflash</p> <p>Description: Flashing utility for the micro:bit</p> <p>Program: $PyInterpreterDirectory$/uflash</p> <p>Working Directory: $FileDir$</p> <p></p> <p>When complete, we click on OK.</p> <p></p> <p>The uflash utility has been added to the list of external tools.</p>"},{"location":"upload/","title":"Upload The File To The micro:bit","text":"<p>To upload a Python file to the micro:bit,  connect the micro:bit to your computer and select the desired Python file in the  Project  panel.</p> <p>Click on the hamburger icon to bring up the main menu. Slide the mouse over the Tools selection and then select External Tools and click on uflash.</p> <p>When the upload completes, the results are displayed in the Run window  at the bottom of the screen.</p> <p></p>"},{"location":"using_mfs/","title":"Using the micro:bit Internal File System","text":"<p>Sometimes, you may wish to add functionality to your project  that is not part of the standard micro:bit library. To import and gain access to the module, you will need to place the  library in the micro:bit persistent file system.</p> <p>The servo library  is a prime example of such a module.  The servo distribution explicitly instructs on how to import an external module. Just click the servo library link  to view the instructions. However, we will use the External tools to work with the micro:bit persistent file system.</p> <p>First, we will create a new directory called external_files by  clicking on the project name at the top of the Project panel.</p> <p></p> <p>Follow the instructions  here to add the new directory. Name the new directory external_modules.</p> <p></p> <p>Now, create a file called servo.py in that directory. Refer to  this section  for creating files.</p> <p>Copy the code from the  servo library into the file.</p> <p></p> <p>Before adding servo.py to the  micro:bit persistent file system, let's examine the persistent file system's contents.</p> <p>Select Tools/External Tools from the main  menu by first clicking on the Hamburger icon.</p> <p></p> <p>Click on ufs ls. The results are displayed in the Run panel at the bottom of the screen. The file main.py is displayed. This is a default file that is preinstalled with the persistent file system.</p> <p></p> <p>Now, let's upload servo.py to the persistent file system.</p> <p>First, we select servo.py in the Project panel and then choose ufs put in the External Tools menu.</p> <p>If we now execute ufs ls again, we see that servo.py has been added.</p> <p></p> <p>If we now execute a ufs rm followed by a ufs ls, we see that the file was removed.</p> <p></p> <p>If you wish to retrieve a file from the persistent file system using  ufs get, you must first have a file in the project with the name of the file you want  to retrieve, and then select that file name in the Project panel,  execute the ufs get  external tool.</p>"}]}